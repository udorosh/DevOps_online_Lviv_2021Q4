#!groovy
properties([disableConcurrentBuilds()])

pipeline {
    agent {
        label 'master'
        }
    options {
      buildDiscarder logRotator(artifactNumToKeepStr: '10', numToKeepStr: '10')
      timestamps()
    }
    environment {
      IMAGE_BASE = 'kiykomi/pet-clinic'
      IMAGE_TAG = "v$BUILD_NUMBER"
      IMAGE_NAME = "${env.IMAGE_BASE}:${env.IMAGE_TAG}"
      IMAGE_NAME_LATEST = "${env.IMAGE_BASE}:latest"
      DOCKERFILE_NAME = "docker/toolbox/Dockerfile"
      DEV_IP = ''
      PROD_IP = ''
    }
    stages {

        stage("building and testinf app") {
          stages {
            stage("Get sources from GitLab") {
              steps {
                checkout scm
              }
            }
            
            stage("testing stage") {
              steps {
                dir ('source_code/spring-petclinic') {
                   sh 'sh mvnw test'
                   sh 'sh mvnw surefire-report:report'
                   junit 'target/surefire-reports/TEST-*.xml'
                }
              }
            }
            
            stage("build artifact") {
              steps {
                dir ('source_code/spring-petclinic') {
                   sh 'sh mvnw package -DskipTests'
                }
                dir ('.') {
                   echo "===========Copying artifact to docker folder============="
                   sh 'cp source_code/spring-petclinic/target/*.jar docker/toolbox/app.jar'
                   echo "===========Archiving artifact for Jenkins============="
                   archiveArtifacts(artifacts: 'source_code/spring-petclinic/target/*.jar')
                   archiveArtifacts(artifacts: 'source_code/spring-petclinic/target/site/surefire-report.html')
                   echo "===========Artifact has copied to Docker folder and Archived for Jenkins============="
                }
              }
            }

          }
        }
        
        stage("docker login") {
            steps {
                echo "===========docker login============="
                withCredentials([usernamePassword(credentialsId: 'dockerhub_kiykomi', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                    sh """
                    docker login -u $USERNAME -p $PASSWORD
                    """
                echo "===========docker login Success!============="
                }
            }
        }


        stage('Push images to registry') {
              steps {
                sh 'pwd'
                script {
                  sh 'pwd'
                  def dockerImage = docker.build("${IMAGE_NAME}", "-f ${DOCKERFILE_NAME} .")
                  docker.withRegistry('', 'dockerhub_kiykomi') {
                    dockerImage.push()
                    dockerImage.push("latest")
                  }
                  echo "Pushed Docker Image: ${IMAGE_NAME}"
                }

                sh "docker rmi ${IMAGE_NAME} ${IMAGE_NAME_LATEST}"
                sh "docker image prune -a -f"
                sh "docker system prune -a"
              }
        }
        
        stage('Build Environment with Terraform') {
          /*input{
             message "Do you want to Build Dev Environment with Terraform?"
          }*/
          steps {
            checkout scm
            dir ('terraform') {
              withAWS(credentials: 'AWS_CREDS', region: 'eu-central-1') {
                sh """
                terraform init
                terraform apply --auto-approve
                """
                script {
                  DEV_IP = sh(returnStdout: true, script: "terraform output -raw dev_server_ip").trim()
                  PROD_IP = sh(returnStdout: true, script: "terraform output -raw prod_server_ip").trim()
                }
                writeFile (file: '../ansible/hosts.txt', text: '[dev]\n' + DEV_IP + '\n' + '[prod]\n' + PROD_IP + '\n')

              }
            }
          }
        }
        stage('Configuring Dev Environment with Ansible') {
          /*input{
             message "Do you want to Configuring Dev Environment?"
          }*/
          steps {
            dir ('ansible') {
              sh 'echo now you are in the'
              sh 'pwd'
              sh 'ansible-playbook devenv.yml'
            }
          }
          post {
            always {
              withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
              sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*Job name - * *${env.JOB_NAME}*, *Build number - * *${BUILD_NUMBER}*, *Testing server address - * *http://${DEV_IP}:8080*' 
              """)
              }
            }
          }
        }


        stage('Configuring Prod Environment with Ansible') {
          input{
             message "Push app to Production?"
          }
          steps {
            dir ('ansible') {
              sh 'echo now you are in the'
              sh 'pwd'
              sh 'ansible-playbook prodenv.yml'
            }
          }
          post {
            always {
              withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
              sh  ("""
              curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*Job name - * *${env.JOB_NAME}*, *Build number - * *${BUILD_NUMBER}*, *Testing server address - * *http://${PROD_IP}:8080*' 
              """)
              }
            }
          }
        }
        stage('Destroy Environment') {
          input{
             message "Do you want to Destroy Dev Environment?"
          }
          steps {
            dir ('terraform') {
              withAWS(credentials: 'AWS_CREDS', region: 'eu-central-1') {
                sh 'terraform destroy --auto-approve'
              }
            }
          }
        }
    }
    post {
     success { 
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : OK *Published* = YES'
        """)
        }
     }

     aborted {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC *Branch*: ${env.GIT_BRANCH} *Build* : `Aborted` *Published* = `Aborted`'
        """)
        }
     
     }
     failure {
        withCredentials([string(credentialsId: 'botSecret', variable: 'TOKEN'), string(credentialsId: 'chatId', variable: 'CHAT_ID')]) {
        sh  ("""
            curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text='*${env.JOB_NAME}* : POC  *Branch*: ${env.GIT_BRANCH} *Build* : `not OK` *Published* = `no`'
        """)
        }
     }

    }
}
